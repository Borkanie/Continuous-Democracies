@page "/parliament"
@rendermode InteractiveServer
@using ParliamentMonitor.Contracts.Services
@using ParliamentMonitor.Contracts.Model.Votes
@using ParliamentMonitor.WebInterface.ViewModels
@inject IVotingService<Vote, Round> VotingService

<h3>Parliament Layout</h3>

<label for="roundSelect">Select Voting Round:</label>
<select id="roundSelect"  @onchange="OnRoundChanged">
    <option value="">-- Select Round --</option>
    @foreach (var r in VotingRounds)
    {
        <option value="@r.VoteId">
            @($"{r.Name}")
        </option>
    }
</select>

@if (Votes.Any())
{
    <h4>Votes in Round @SelectedRoundId:</h4>
    
        <VoteCanvas Votes="@Votes"
            Width="@ContainerWidth"
            Height="@ContainerHeigth"
            VoteBoxSize="25" 
             @key="SelectedRoundId"/>
    
}
else if (SelectedRoundId != 0)
{
    <p>No votes found for this round.</p>
}

@code {
    private ISet<VoteContainer> Votes = new HashSet<VoteContainer>();
    private ISet<Round> VotingRounds = new HashSet<Round>();
    private int SelectedRoundId = 0;
    private int ContainerWidth = 500;
    private int ContainerHeigth = 700;

    protected override async Task OnInitializedAsync()
    {
        // Load available voting rounds when page initializes
        Console.WriteLine("Here we gooo");
        VotingRounds = VotingService.GetAllRoundsFromDB();
    }

    private async Task OnRoundChanged(ChangeEventArgs e)
    {
        Console.WriteLine($"Dropdown changed! Value: ");

        if (int.TryParse(e.Value?.ToString(), out int roundId))
        {
            Console.WriteLine($"Parsed roundId: {roundId}");
            SelectedRoundId = roundId;

            var round = VotingService.GetVotingRound(roundId);
            Votes = VoteContainer.CreateContainers(round?.VoteResults ?? new HashSet<Vote>(), ContainerWidth, ContainerHeigth);

            Console.WriteLine($"Votes count: {Votes.Count}");
        }
        else
        {
            Console.WriteLine("Invalid selection.");
            SelectedRoundId = 0;
            Votes.Clear();
        }
        StateHasChanged();
    }

}
